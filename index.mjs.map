{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport resolve from '@stdlib/ndarray-base-dtype-resolve-str';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Transforms a list of array argument data types into a list of signatures.\n*\n* @param {ArrayLikeObject} dtypes - list of array argument data types\n* @param {NonNegativeInteger} nin - number of input array arguments\n* @param {NonNegativeInteger} nout - number of output array arguments\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a nonnegative integer\n* @throws {RangeError} first argument must contain at least one element\n* @throws {RangeError} length of the first argument is incompatible with the second and third arguments\n* @returns {StringArray} list of signatures\n*\n* @example\n* var dtypes = [\n*     'float64', 'float64',\n*     'float32', 'float32'\n* ];\n*\n* var sigs = dtypes2signatures( dtypes, 1, 1 );\n* // returns [ '(float64) => (float64)', '(float32) => (float32)' ]\n*/\nfunction dtypes2signatures( dtypes, nin, nout ) {\n\tvar len;\n\tvar out;\n\tvar tmp;\n\tvar dt;\n\tvar N;\n\tvar M;\n\tvar i;\n\tvar m;\n\n\tif ( !isArrayLikeObject( dtypes ) ) {\n\t\tthrow new TypeError( format( '0ME2a', dtypes ) );\n\t}\n\tif ( !isNonNegativeInteger( nin ) ) {\n\t\tthrow new TypeError( format( '0ME3k', nin ) );\n\t}\n\tif ( !isNonNegativeInteger( nout ) ) {\n\t\tthrow new TypeError( format( '0ME2y', nout ) );\n\t}\n\tlen = dtypes.length;\n\tif ( len === 0 ) {\n\t\tthrow new RangeError( format( '0ME0a' ) );\n\t}\n\tN = nin + nout;\n\tif ( len%N !== 0 ) {\n\t\tthrow new RangeError( 'invalid arguments. Length of the first argument is incompatible with the second and third arguments.' );\n\t}\n\tout = [];\n\n\t// Create a temporary array for storing signatures...\n\ttmp = [];\n\n\t// [ '(', <in_dtype>, ', ', ..., ') => (', <out_dtype>, ', ', ..., ')' ] => 1+nin+nin-1+1+nout+nout-1+1 => 1 + (2*nin) + (2*nout) => 1 + (2*(nin+nout))\n\tM = 2 * N;\n\tm = 2 * nin;\n\tfor ( i = 0; i <= M; i++ ) {\n\t\tif ( i === 0 ) {\n\t\t\tif ( i === m ) {\n\t\t\t\ttmp.push( '() => (' );\n\t\t\t} else {\n\t\t\t\ttmp.push( '(' );\n\t\t\t}\n\t\t} else if ( i === M ) {\n\t\t\tif ( i === m ) {\n\t\t\t\ttmp.push( ') => ()' );\n\t\t\t} else {\n\t\t\t\ttmp.push( ')' );\n\t\t\t}\n\t\t} else if ( i === m ) {\n\t\t\ttmp.push( ') => (' );\n\t\t} else if ( i%2 === 1 ) {\n\t\t\ttmp.push( '' );\n\t\t} else {\n\t\t\ttmp.push( ', ' );\n\t\t}\n\t}\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdt = resolve( dtypes[ i ] );\n\t\tif ( dt === null ) {\n\t\t\tdt = dtypes[ i ];\n\t\t}\n\t\tm = i % N;\n\t\ttmp[ (2*m)+1 ] = dt;\n\t\tif ( m === N-1 ) {\n\t\t\tout.push( tmp.join( '' ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dtypes2signatures;\n"],"names":["dtypes2signatures","dtypes","nin","nout","len","out","tmp","dt","N","M","i","m","isArrayLikeObject","TypeError","format","isNonNegativeInteger","length","RangeError","push","resolve","join"],"mappings":";;kZAoDA,SAASA,EAAmBC,EAAQC,EAAKC,GACxC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAmBX,GACxB,MAAM,IAAIY,UAAWC,EAAQ,QAASb,IAEvC,IAAMc,EAAsBb,GAC3B,MAAM,IAAIW,UAAWC,EAAQ,QAASZ,IAEvC,IAAMa,EAAsBZ,GAC3B,MAAM,IAAIU,UAAWC,EAAQ,QAASX,IAGvC,GAAa,KADbC,EAAMH,EAAOe,QAEZ,MAAM,IAAIC,WAAYH,EAAQ,UAG/B,GAAKV,GADLI,EAAIN,EAAMC,IACK,EACd,MAAM,IAAIc,WAAY,wGAUvB,IARAZ,EAAM,GAGNC,EAAM,GAGNG,EAAI,EAAID,EACRG,EAAI,EAAIT,EACFQ,EAAI,EAAGA,GAAKD,EAAGC,IACT,IAANA,EACCA,IAAMC,EACVL,EAAIY,KAAM,WAEVZ,EAAIY,KAAM,KAEAR,IAAMD,EACZC,IAAMC,EACVL,EAAIY,KAAM,WAEVZ,EAAIY,KAAM,KAEAR,IAAMC,EACjBL,EAAIY,KAAM,UACCR,EAAE,GAAM,EACnBJ,EAAIY,KAAM,IAEVZ,EAAIY,KAAM,MAGZ,IAAMR,EAAI,EAAGA,EAAIN,EAAKM,IAET,QADZH,EAAKY,EAASlB,EAAQS,OAErBH,EAAKN,EAAQS,IAGdJ,EAAM,GADNK,EAAID,EAAIF,GACG,GAAMD,EACZI,IAAMH,EAAE,GACZH,EAAIa,KAAMZ,EAAIc,KAAM,KAGtB,OAAOf,CACR"}